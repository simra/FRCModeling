# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    OpenAPI spec version: 3.04.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MatchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_event_match_timeseries(self, event_key, **kwargs):  # noqa: E501
        """get_event_match_timeseries  # noqa: E501

        Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_match_timeseries(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_event_match_timeseries_with_http_info(event_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_event_match_timeseries_with_http_info(event_key, **kwargs)  # noqa: E501
            return data

    def get_event_match_timeseries_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_match_timeseries  # noqa: E501

        Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_match_timeseries_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_match_timeseries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params or
                params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_match_timeseries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/matches/timeseries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_matches(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches  # noqa: E501

        Gets a list of matches for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_event_matches_with_http_info(event_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_event_matches_with_http_info(event_key, **kwargs)  # noqa: E501
            return data

    def get_event_matches_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches  # noqa: E501

        Gets a list of matches for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_matches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params or
                params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_matches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/matches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_matches_keys(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches_keys  # noqa: E501

        Gets a list of match keys for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches_keys(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_event_matches_keys_with_http_info(event_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_event_matches_keys_with_http_info(event_key, **kwargs)  # noqa: E501
            return data

    def get_event_matches_keys_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches_keys  # noqa: E501

        Gets a list of match keys for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches_keys_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_matches_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params or
                params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_matches_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/matches/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_matches_simple(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches_simple  # noqa: E501

        Gets a short-form list of matches for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches_simple(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[MatchSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_event_matches_simple_with_http_info(event_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_event_matches_simple_with_http_info(event_key, **kwargs)  # noqa: E501
            return data

    def get_event_matches_simple_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches_simple  # noqa: E501

        Gets a short-form list of matches for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches_simple_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[MatchSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_matches_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params or
                params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_event_matches_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/matches/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MatchSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_match(self, match_key, **kwargs):  # noqa: E501
        """get_match  # noqa: E501

        Gets a `Match` object for the given match key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_match(match_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str match_key: TBA Match Key, eg `2016nytr_qm1` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_match_with_http_info(match_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_match_with_http_info(match_key, **kwargs)  # noqa: E501
            return data

    def get_match_with_http_info(self, match_key, **kwargs):  # noqa: E501
        """get_match  # noqa: E501

        Gets a `Match` object for the given match key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_match_with_http_info(match_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str match_key: TBA Match Key, eg `2016nytr_qm1` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['match_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_match" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'match_key' is set
        if ('match_key' not in params or
                params['match_key'] is None):
            raise ValueError("Missing the required parameter `match_key` when calling `get_match`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'match_key' in params:
            path_params['match_key'] = params['match_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/match/{match_key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Match',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_match_simple(self, match_key, **kwargs):  # noqa: E501
        """get_match_simple  # noqa: E501

        Gets a short-form `Match` object for the given match key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_match_simple(match_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str match_key: TBA Match Key, eg `2016nytr_qm1` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: MatchSimple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_match_simple_with_http_info(match_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_match_simple_with_http_info(match_key, **kwargs)  # noqa: E501
            return data

    def get_match_simple_with_http_info(self, match_key, **kwargs):  # noqa: E501
        """get_match_simple  # noqa: E501

        Gets a short-form `Match` object for the given match key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_match_simple_with_http_info(match_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str match_key: TBA Match Key, eg `2016nytr_qm1` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: MatchSimple
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['match_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_match_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'match_key' is set
        if ('match_key' not in params or
                params['match_key'] is None):
            raise ValueError("Missing the required parameter `match_key` when calling `get_match_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'match_key' in params:
            path_params['match_key'] = params['match_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/match/{match_key}/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MatchSimple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_match_timeseries(self, match_key, **kwargs):  # noqa: E501
        """get_match_timeseries  # noqa: E501

        Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_match_timeseries(match_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str match_key: TBA Match Key, eg `2016nytr_qm1` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_match_timeseries_with_http_info(match_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_match_timeseries_with_http_info(match_key, **kwargs)  # noqa: E501
            return data

    def get_match_timeseries_with_http_info(self, match_key, **kwargs):  # noqa: E501
        """get_match_timeseries  # noqa: E501

        Gets an array of game-specific Match Timeseries objects for the given match key or an empty array if not available. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_match_timeseries_with_http_info(match_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str match_key: TBA Match Key, eg `2016nytr_qm1` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['match_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_match_timeseries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'match_key' is set
        if ('match_key' not in params or
                params['match_key'] is None):
            raise ValueError("Missing the required parameter `match_key` when calling `get_match_timeseries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'match_key' in params:
            path_params['match_key'] = params['match_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/match/{match_key}/timeseries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_matches(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches  # noqa: E501

        Gets a list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_team_event_matches_with_http_info(team_key, event_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_team_event_matches_with_http_info(team_key, event_key, **kwargs)  # noqa: E501
            return data

    def get_team_event_matches_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches  # noqa: E501

        Gets a list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params or
                params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_event_matches`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params or
                params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_team_event_matches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']  # noqa: E501
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/matches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_matches_keys(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_keys  # noqa: E501

        Gets a list of match keys for matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_keys(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_team_event_matches_keys_with_http_info(team_key, event_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_team_event_matches_keys_with_http_info(team_key, event_key, **kwargs)  # noqa: E501
            return data

    def get_team_event_matches_keys_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_keys  # noqa: E501

        Gets a list of match keys for matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_keys_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params or
                params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_event_matches_keys`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params or
                params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_team_event_matches_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']  # noqa: E501
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/matches/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_matches_simple(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_simple  # noqa: E501

        Gets a short-form list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_simple(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_team_event_matches_simple_with_http_info(team_key, event_key, **kwargs)  # noqa: E501
        else:
            (data) = self.get_team_event_matches_simple_with_http_info(team_key, event_key, **kwargs)  # noqa: E501
            return data

    def get_team_event_matches_simple_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_simple  # noqa: E501

        Gets a short-form list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_simple_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params or
                params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_event_matches_simple`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if ('event_key' not in params or
                params['event_key'] is None):
            raise ValueError("Missing the required parameter `event_key` when calling `get_team_event_matches_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']  # noqa: E501
        if 'event_key' in params:
            path_params['event_key'] = params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/matches/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_matches_by_year(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year  # noqa: E501

        Gets a list of matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_team_matches_by_year_with_http_info(team_key, year, **kwargs)  # noqa: E501
        else:
            (data) = self.get_team_matches_by_year_with_http_info(team_key, year, **kwargs)  # noqa: E501
            return data

    def get_team_matches_by_year_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year  # noqa: E501

        Gets a list of matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_matches_by_year" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params or
                params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_matches_by_year`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_team_matches_by_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/matches/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_matches_by_year_keys(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year_keys  # noqa: E501

        Gets a list of match keys for matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year_keys(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_team_matches_by_year_keys_with_http_info(team_key, year, **kwargs)  # noqa: E501
        else:
            (data) = self.get_team_matches_by_year_keys_with_http_info(team_key, year, **kwargs)  # noqa: E501
            return data

    def get_team_matches_by_year_keys_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year_keys  # noqa: E501

        Gets a list of match keys for matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year_keys_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_matches_by_year_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params or
                params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_matches_by_year_keys`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_team_matches_by_year_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/matches/{year}/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_matches_by_year_simple(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year_simple  # noqa: E501

        Gets a short-form list of matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year_simple(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[MatchSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_team_matches_by_year_simple_with_http_info(team_key, year, **kwargs)  # noqa: E501
        else:
            (data) = self.get_team_matches_by_year_simple_with_http_info(team_key, year, **kwargs)  # noqa: E501
            return data

    def get_team_matches_by_year_simple_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year_simple  # noqa: E501

        Gets a short-form list of matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year_simple_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :return: list[MatchSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_matches_by_year_simple" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_key' is set
        if ('team_key' not in params or
                params['team_key'] is None):
            raise ValueError("Missing the required parameter `team_key` when calling `get_team_matches_by_year_simple`")  # noqa: E501
        # verify the required parameter 'year' is set
        if ('year' not in params or
                params['year'] is None):
            raise ValueError("Missing the required parameter `year` when calling `get_team_matches_by_year_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in params:
            path_params['team_key'] = params['team_key']  # noqa: E501
        if 'year' in params:
            path_params['year'] = params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in params:
            header_params['If-Modified-Since'] = params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/matches/{year}/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MatchSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
