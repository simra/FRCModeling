# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    OpenAPI spec version: 3.04.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TeamEventStatusRankSortOrderInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'precision': 'int'
    }

    attribute_map = {
        'name': 'name',
        'precision': 'precision'
    }

    def __init__(self, name=None, precision=None):  # noqa: E501
        """TeamEventStatusRankSortOrderInfo - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._precision = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if precision is not None:
            self.precision = precision

    @property
    def name(self):
        """Gets the name of this TeamEventStatusRankSortOrderInfo.  # noqa: E501

        The descriptive name of the value used to sort the ranking.  # noqa: E501

        :return: The name of this TeamEventStatusRankSortOrderInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TeamEventStatusRankSortOrderInfo.

        The descriptive name of the value used to sort the ranking.  # noqa: E501

        :param name: The name of this TeamEventStatusRankSortOrderInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def precision(self):
        """Gets the precision of this TeamEventStatusRankSortOrderInfo.  # noqa: E501

        The number of digits of precision used for this value, eg `2` would correspond to a value of `101.11` while `0` would correspond to `101`.  # noqa: E501

        :return: The precision of this TeamEventStatusRankSortOrderInfo.  # noqa: E501
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this TeamEventStatusRankSortOrderInfo.

        The number of digits of precision used for this value, eg `2` would correspond to a value of `101.11` while `0` would correspond to `101`.  # noqa: E501

        :param precision: The precision of this TeamEventStatusRankSortOrderInfo.  # noqa: E501
        :type: int
        """

        self._precision = precision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamEventStatusRankSortOrderInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamEventStatusRankSortOrderInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
