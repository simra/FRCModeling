# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    OpenAPI spec version: 3.04.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DistrictList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'abbreviation': 'str',
        'display_name': 'str',
        'key': 'str',
        'year': 'int'
    }

    attribute_map = {
        'abbreviation': 'abbreviation',
        'display_name': 'display_name',
        'key': 'key',
        'year': 'year'
    }

    def __init__(self, abbreviation=None, display_name=None, key=None, year=None):  # noqa: E501
        """DistrictList - a model defined in Swagger"""  # noqa: E501

        self._abbreviation = None
        self._display_name = None
        self._key = None
        self._year = None
        self.discriminator = None

        self.abbreviation = abbreviation
        self.display_name = display_name
        self.key = key
        self.year = year

    @property
    def abbreviation(self):
        """Gets the abbreviation of this DistrictList.  # noqa: E501

        The short identifier for the district.  # noqa: E501

        :return: The abbreviation of this DistrictList.  # noqa: E501
        :rtype: str
        """
        return self._abbreviation

    @abbreviation.setter
    def abbreviation(self, abbreviation):
        """Sets the abbreviation of this DistrictList.

        The short identifier for the district.  # noqa: E501

        :param abbreviation: The abbreviation of this DistrictList.  # noqa: E501
        :type: str
        """
        if abbreviation is None:
            raise ValueError("Invalid value for `abbreviation`, must not be `None`")  # noqa: E501

        self._abbreviation = abbreviation

    @property
    def display_name(self):
        """Gets the display_name of this DistrictList.  # noqa: E501

        The long name for the district.  # noqa: E501

        :return: The display_name of this DistrictList.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DistrictList.

        The long name for the district.  # noqa: E501

        :param display_name: The display_name of this DistrictList.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def key(self):
        """Gets the key of this DistrictList.  # noqa: E501

        Key for this district, e.g. `2016ne`.  # noqa: E501

        :return: The key of this DistrictList.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DistrictList.

        Key for this district, e.g. `2016ne`.  # noqa: E501

        :param key: The key of this DistrictList.  # noqa: E501
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def year(self):
        """Gets the year of this DistrictList.  # noqa: E501

        Year this district participated.  # noqa: E501

        :return: The year of this DistrictList.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this DistrictList.

        Year this district participated.  # noqa: E501

        :param year: The year of this DistrictList.  # noqa: E501
        :type: int
        """
        if year is None:
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DistrictList, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DistrictList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
